#!/usr/bin/env ruby

require 'zip'
require 'json'
require 'oga' # xml parser
require 'pry'

MATERIALIZE_PACKAGE_PATH = ENV['HOME'] +
  "/Library/Application Support/Sublime Text 3"\
  "/Installed Packages/Materialize.sublime-package"

PRESETS_PATH = ENV['HOME'] +
  "/Library/Application Support/Sublime Text 3"\
  "/Packages/User/Presets.sublime-settings"

def read_theme_info(package_path = MATERIALIZE_PACKAGE_PATH)
  Zip::File.open(package_path) do |zip_file|
    zip_file.glob("schemes/*.tmTheme").map do |entry|
      name = entry.name[%r{schemes/Material ([^\.]+)\.tmTheme}, 1]

      bg_color =
        Oga
        .parse_xml(entry.get_input_stream.read)
        .xpath('//key')
        .find{|n| n.text =~ /background/}
        .next
        .next
        .text
        .sub('#', '')

      [name, bg_color]
    end.sort
  end
end

def dark?(color)
  red, green, blue = color.chars.each_slice(2).map(&:join).map{|s| s.to_i(16)}
  brightness = (red * 299 + green * 587 + blue * 114) / 1000.0
  brightness < 128
end

def make_presets(theme_info)
  theme_info.map do |(name, bg_color)|
    # TODO make this smarter, because Primer Light doesn't work for example
    brightness_str = dark?(bg_color) ? "(dark)" : "(light)"

    {
      'name' => "Materialize - #{name}",
      'description' => "Material #{name}",
      'settings' => {
        'theme' => "Material #{name}.sublime-theme",
        'color_scheme' =>
          "Packages/Materialize/schemes/Material #{name}.tmTheme"
      }
    }
  end
end

settings = JSON.parse(File.read(PRESETS_PATH))
new_presets = settings['presets'].reject{|p| p['name'] =~ /^Materialize\W/}
make_presets(read_theme_info).each do |preset|
  puts preset['name']
  new_presets << preset
end

File.write(
  PRESETS_PATH,
  JSON.pretty_generate({'presets' => new_presets}, indent: ' ' * 4)
)
